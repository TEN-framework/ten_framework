#
# Copyright Â© 2025 Agora
# This file is part of TEN Framework, an open source project.
# Licensed under the Apache License, Version 2.0, with certain conditions.
# Refer to the "LICENSE" file in the root directory for more information.
#
import("//build/feature/ten_package.gni")
import("//build/ten_common/rust/rust.gni")
import("//build/ten_manager/options.gni")
import("//third_party/clingo/output_libs.gni")

declare_args() {
  use_shared_lib = false
}

copy("ten_manager_test_data") {
  sources = [ "//core/src/ten_manager/tests/test_data" ]
  outputs = [ "${root_out_dir}/tests/standalone/ten_manager/tests/test_data" ]
}

if (ten_enable_ten_manager) {
  if (ten_manager_enable_tests) {
    rust_test("tman_test_cargo_build") {
      project_path = "//core/src/ten_manager"
      integration_test_output_name = "integration_test"

      clingo_lib_folder =
          rebase_path("${root_out_dir}/gen/cmake/clingo/install/lib")
      env = [ "CLINGO_LIBRARY_PATH=${clingo_lib_folder}" ]

      # The transitive dependency of the ten_rust crate.
      utils_static_lib_path = rebase_path("${root_gen_dir}/core/src/ten_utils")
      env += [ "TEN_UTILS_LIBRARY_PATH=${utils_static_lib_path}" ]

      # If the output directory of `cargo build` (tman) and
      # `cargo build --tests` (tman_test) is the same, and if `cargo build` is
      # executed first followed by `cargo build --tests`, the resulting
      # executable will be the normal executable, not the test case executable.
      # Therefore, it's necessary to separate the `target-dir` for these two
      # `cargo build` commands to avoid interfering with each other.
      target_path = "${root_gen_dir}/core/src/ten_manager_test"

      # Copy the test executable to the test output directory.
      test_output_dir = "${root_out_dir}/tests/standalone/ten_manager"

      deps = [
        ":ten_manager_test_data",
        "//core/src/ten_rust:ten_rust_static_lib",
        "//third_party/clingo",
      ]
    }

    rust_clean("tman_test_cargo_clean") {
      project_path = "//core/src/ten_manager"
      target_path = "${root_gen_dir}/core/src/ten_manager_test"

      # Build tman_test first, then `cargo clean` it.
      deps = [ ":tman_test_cargo_build" ]
    }

    group("tman_test") {
      if (ten_enable_cargo_clean) {
        deps = [ ":tman_test_cargo_clean" ]
      } else {
        deps = [ ":tman_test_cargo_build" ]
      }
    }
  }

  action("copy_clingo_config_files") {
    script = "//build/ten_common/scripts/copy_files.py"

    sources = [
      "//core/src/ten_manager/src/solver/display.lp",
      "//core/src/ten_manager/src/solver/main.lp",
    ]
    outputs = [
      "${root_out_dir}/ten_manager/solver/display.lp",
      "${root_out_dir}/ten_manager/solver/main.lp",
    ]

    args = []
    foreach(f, sources + outputs) {
      args += [ rebase_path(f) ]
    }
  }

  if (ten_manager_enable_frontend) {
    action("build_designer_frontend") {
      script = "//build/ten_manager/scripts/build_frontend.py"

      args = [
        "--dir",
        rebase_path("//core/src/ten_manager/designer_frontend"),
        "--log-level",
        "${log_level}",
      ]

      # A timestamp file is used to track the last build time of the frontend.
      outputs = [ "${root_out_dir}/gen/tman_frontend_build.timestamp" ]
    }
  } else {
    # Because tman will look for `designer_frontend/dist/` during compilation to
    # bundle the frontend codes, even if `ten_manager_enable_frontend=false`, an
    # empty `designer_frontend/dist/` is still required to prevent `tman` from
    # encountering compilation errors.
    action("create_frontend_dist_folder") {
      script = "//build/ten_common/scripts/mkdir.py"

      args = [ rebase_path("//core/src/ten_manager/designer_frontend/dist/") ]

      outputs = [ "${root_out_dir}/gen/core/src/ten_manager/designer_frontend/dist/.placeholder" ]
    }
  }

  rust_target("tman") {
    project_path = "//core/src/ten_manager"
    manifest_path = "//core/src/ten_manager/Cargo.toml"
    target_path = "${target_gen_dir}/tman"

    clingo_lib_folder =
        rebase_path("${root_out_dir}/gen/cmake/clingo/install/lib")
    env = [ "CLINGO_LIBRARY_PATH=${clingo_lib_folder}" ]

    # The transitive dependency of the ten_rust crate.
    utils_static_lib_path = rebase_path("${root_gen_dir}/core/src/ten_utils")
    env += [ "TEN_UTILS_LIBRARY_PATH=${utils_static_lib_path}" ]

    extra_sources = [
      "//core/src/ten_manager/src/solver/display.lp",
      "//core/src/ten_manager/src/solver/main.lp",
    ]

    if (is_win) {
      output_name = "tman.exe"
    } else {
      output_name = "tman"
    }

    deps = [
      "//core/src/ten_rust:ten_rust_static_lib",
      "//third_party/clingo",
    ]

    if (ten_manager_enable_frontend) {
      deps += [
        # The frontend build is required before building the backend.
        ":build_designer_frontend",
      ]
    } else {
      deps += [
        # The `designer_frontend/dist/` is required before building the backend.
        ":create_frontend_dist_folder",
      ]
    }
  }

  # Assembling the final ten manager package.
  ten_package("ten_manager_package") {
    package_kind = "custom"
    package_output_root_dir_name = "ten_manager"

    tman_output = get_target_outputs(":tman")

    if (is_win) {
      use_shared_lib = true
    }

    resources = []
    if (is_win) {
      resources += [ "${tman_output[0]}=>bin/tman.exe" ]
    } else {
      resources += [ "${tman_output[0]}=>bin/tman" ]
    }

    if (use_shared_lib) {
      lib_dest_folder = "lib"
      if (is_win) {
        # In Windows, all .dll used by the executable must be in the same folder.
        lib_dest_folder = "bin"
      }

      foreach(lib, clingo_output_libs) {
        libname = get_path_info(rebase_path(lib), "file")
        resources += [ "${lib}=>${lib_dest_folder}/${libname}" ]
      }
    }

    deps = [
      ":tman",
      "//third_party/clingo",
    ]

    if (use_shared_lib) {
      # Copy relevant resources files.
      deps += [ ":copy_clingo_config_files" ]
    }
  }

  rust_clean("tman_cargo_clean") {
    project_path = "//core/src/ten_manager"
    tman_target_gen_dir = get_label_info(":tman", "target_gen_dir")
    target_path = "${tman_target_gen_dir}/tman"

    # Build tman first, then `cargo clean` it.
    deps = [ ":ten_manager_package" ]
  }

  group("ten_manager") {
    if (ten_enable_cargo_clean) {
      deps = [ ":tman_cargo_clean" ]
    } else {
      deps = [ ":ten_manager_package" ]
    }
  }
}
