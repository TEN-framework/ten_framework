#
# Copyright Â© 2025 Agora
# This file is part of TEN Framework, an open source project.
# Licensed under the Apache License, Version 2.0, with certain conditions.
# Refer to the "LICENSE" file in the root directory for more information.
#
declare_args() {
  # The TEN runtime has its own memory check/track mechanism, which can be used
  # in conjunction with ASAN (AddressSanitizer).
  ten_enable_memory_check = true

  # The 'ten_rust' crate depends on the 'ten_utils' (C codes) static library.
  # The C compiler supports AddressSanitizer on Linux x86, however the rustc
  # does not. Therefore, the 'ten_rust' crate is disabled on x86.
  #
  # TODO(Liu): Add a gn target to compile the 'ten_utils' static without asan on
  # x86.
  ten_enable_ten_rust = !(enable_sanitizer && target_cpu == "x86")

  ten_enable_ten_manager = true

  # After building a Rust/Cargo project, clean the project using `cargo clean`.
  # This is mainly to reduce disk usage in environments with limited disk space,
  # such as CI.
  ten_enable_cargo_clean = false

  # Since building the integration tests also increases disk space usage, in
  # disk space-limited environments (such as CI), the variable below is used to
  # defer the integration test build until the testing phase. This prevents it
  # from being built together with the core TEN framework components (e.g.,
  # `ten_runtime`, `ten_manager`).
  ten_enable_integration_tests_prebuilt = false

  # Rust's incremental build requires additional disk space, so this option
  # allows it to be disabled in CI environments.
  ten_enable_rust_incremental_build = true
}

declare_args() {
  # Since `cargo build` can consume a significant amount of disk space, it is
  # necessary to limit the concurrency of `cargo build` in certain build
  # environments (e.g., CI) to manage disk space requirements.
  ten_enable_serialized_rust_action = false
}
