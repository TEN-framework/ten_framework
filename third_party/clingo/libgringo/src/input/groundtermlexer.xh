// {{{ MIT License

// Copyright 2017 Roland Kaminski

// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to
// deal in the Software without restriction, including without limitation the
// rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
// sell copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:

// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.

// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
// IN THE SOFTWARE.

// }}}

#define YYCTYPE     char
#define YYCURSOR    cursor()
#define YYLIMIT     limit()
#define YYMARKER    marker()
#define YYCTXMARKER ctxmarker()
#define YYFILL(n)   {fill(n);}

/*!re2c
    DEC        = "0"|([1-9][0-9]*);
    HEX        = "0x"([0-9A-Fa-f]+);
    OCT        = "0o"([1-7]+);
    BIN        = "0b"([0-1]+);
    NUMBER     = DEC | HEX | OCT | BIN;
    ANY        = [\000-\377];
    WS         = [\t\r ]*;
    NL         = "\n";
    IDENTIFIER = [_']*[a-z]['A-Za-z0-9_]*;
    STRING     = "\"" ([^\\"\n]|"\\\""|"\\\\"|"\\n")* "\"";
    WSNL       = [\t\r\n ]*;
*/

int Gringo::Input::GroundTermParser::lex_impl(void *pValue, Logger &log) {
start:
    start();
    auto &value = *static_cast<Gringo::Input::GroundTermGrammar::parser::semantic_type*>(pValue);
    /*!re2c
        WS               { goto start; }
        NL               { if(eof()) return 0; step(); goto start; }
        "#inf"("imum")?  { return GroundTermGrammar::parser::token::INFIMUM; }
        "#sup"("remum")? { return GroundTermGrammar::parser::token::SUPREMUM; }

        IDENTIFIER       { value.str = String(string()).c_str(); return GroundTermGrammar::parser::token::IDENTIFIER; }
        NUMBER           { value.num = clingo_number(); return GroundTermGrammar::parser::token::NUMBER; }
        STRING           { value.str = String(unquote(string(1, 1)).c_str()).c_str(); return GroundTermGrammar::parser::token::STRING; }

        "("              { return GroundTermGrammar::parser::token::LPAREN; }
        ")"              { return GroundTermGrammar::parser::token::RPAREN; }
        "+"              { return GroundTermGrammar::parser::token::ADD; }
        "-"              { return GroundTermGrammar::parser::token::SUB; }
        "**"             { return GroundTermGrammar::parser::token::POW; }
        "\\"             { return GroundTermGrammar::parser::token::MOD; }
        "*"              { return GroundTermGrammar::parser::token::MUL; }
        "/"              { return GroundTermGrammar::parser::token::SLASH; }
        "&"              { return GroundTermGrammar::parser::token::AND; }
        "^"              { return GroundTermGrammar::parser::token::XOR; }
        "~"              { return GroundTermGrammar::parser::token::BNOT; }
        "?"              { return GroundTermGrammar::parser::token::QUESTION; }
        ","              { return GroundTermGrammar::parser::token::COMMA; }
        "|"              { return GroundTermGrammar::parser::token::VBAR; }
        ANY              { lexerError(string(), log); goto start; }
    */
    assert(false);
    return 0;
}

#undef YYCTYPE
#undef YYCURSOR
#undef YYLIMIT
#undef YYMARKER
#undef YYFILL
