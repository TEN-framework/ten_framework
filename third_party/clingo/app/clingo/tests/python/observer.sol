Step: 1
a
a
Step: 2
a b q(acyc_edge(0,1,(a,b))) q(assume((neg(b),))) q(begin_step) q(end_step) q(external(a,"False_")) q(heuristic(a,"Sign",1,(b,))) q(init_program(1)) q(minimize(0,((a,1),(b,2)))) q(output_atom(a)) q(output_atom(b)) q(output_term(x,(__aux,))) q(project((a,))) q(rule(0,(),(__aux,neg(__aux)))) q(rule(0,(__aux,),())) q(rule(0,(__aux,),(a,b))) q(rule(0,(a,),(theory(a,(elem((+(1,2),"test"),(a,b)),)),))) q(rule(0,(b,),(theory(b(3),(),=,17),))) q(rule(1,(a,b),(__aux,))) q(weight_rule(0,(__aux,),1,((a,1),(b,1)))) x
a b q(acyc_edge(0,1,(a,b))) q(assume((neg(b),))) q(begin_step) q(end_step) q(external(a,"False_")) q(heuristic(a,"Sign",1,(b,))) q(init_program(1)) q(minimize(0,((a,1),(b,2)))) q(output_atom(a)) q(output_atom(b)) q(output_term(x,(__aux,))) q(project((a,))) q(rule(0,(),(__aux,neg(__aux)))) q(rule(0,(__aux,),())) q(rule(0,(__aux,),(a,b))) q(rule(0,(a,),(theory(a,(elem((+(1,2),"test"),(a,b)),)),))) q(rule(0,(b,),(theory(b(3),(),=,17),))) q(rule(1,(a,b),(__aux,))) q(weight_rule(0,(__aux,),1,((a,1),(b,1)))) x
a b q(acyc_edge(0,1,(a,b))) q(assume((neg(b),))) q(begin_step) q(end_step) q(external(a,"False_")) q(heuristic(a,"Sign",1,(b,))) q(init_program(1)) q(minimize(0,((a,1),(b,2)))) q(output_atom(a)) q(output_atom(b)) q(output_term(x,(__aux,))) q(project((a,))) q(rule(0,(),(__aux,neg(__aux)))) q(rule(0,(__aux,),())) q(rule(0,(__aux,),(a,b))) q(rule(0,(a,),(theory(a,(elem((+(1,2),"test"),(a,b)),)),))) q(rule(0,(b,),(theory(b(3),(),=,17),))) q(rule(1,(a,b),(__aux,))) q(weight_rule(0,(__aux,),1,((a,1),(b,1)))) x
a b q(acyc_edge(0,1,(a,b))) q(assume((neg(b),))) q(begin_step) q(end_step) q(external(a,"False_")) q(heuristic(a,"Sign",1,(b,))) q(init_program(1)) q(minimize(0,((a,1),(b,2)))) q(output_atom(a)) q(output_atom(b)) q(output_term(x,(__aux,))) q(project((a,))) q(rule(0,(),(__aux,neg(__aux)))) q(rule(0,(__aux,),())) q(rule(0,(__aux,),(a,b))) q(rule(0,(a,),(theory(a,(elem((+(1,2),"test"),(a,b)),)),))) q(rule(0,(b,),(theory(b(3),(),=,17),))) q(rule(1,(a,b),(__aux,))) q(weight_rule(0,(__aux,),1,((a,1),(b,1)))) x
a q(acyc_edge(0,1,(a,b))) q(assume((neg(b),))) q(begin_step) q(end_step) q(external(a,"False_")) q(heuristic(a,"Sign",1,(b,))) q(init_program(1)) q(minimize(0,((a,1),(b,2)))) q(output_atom(a)) q(output_atom(b)) q(output_term(x,(__aux,))) q(project((a,))) q(rule(0,(),(__aux,neg(__aux)))) q(rule(0,(__aux,),())) q(rule(0,(__aux,),(a,b))) q(rule(0,(a,),(theory(a,(elem((+(1,2),"test"),(a,b)),)),))) q(rule(0,(b,),(theory(b(3),(),=,17),))) q(rule(1,(a,b),(__aux,))) q(weight_rule(0,(__aux,),1,((a,1),(b,1))))
a q(acyc_edge(0,1,(a,b))) q(assume((neg(b),))) q(begin_step) q(end_step) q(external(a,"False_")) q(heuristic(a,"Sign",1,(b,))) q(init_program(1)) q(minimize(0,((a,1),(b,2)))) q(output_atom(a)) q(output_atom(b)) q(output_term(x,(__aux,))) q(project((a,))) q(rule(0,(),(__aux,neg(__aux)))) q(rule(0,(__aux,),())) q(rule(0,(__aux,),(a,b))) q(rule(0,(a,),(theory(a,(elem((+(1,2),"test"),(a,b)),)),))) q(rule(0,(b,),(theory(b(3),(),=,17),))) q(rule(1,(a,b),(__aux,))) q(weight_rule(0,(__aux,),1,((a,1),(b,1))))
b q(acyc_edge(0,1,(a,b))) q(assume((neg(b),))) q(begin_step) q(end_step) q(external(a,"False_")) q(heuristic(a,"Sign",1,(b,))) q(init_program(1)) q(minimize(0,((a,1),(b,2)))) q(output_atom(a)) q(output_atom(b)) q(output_term(x,(__aux,))) q(project((a,))) q(rule(0,(),(__aux,neg(__aux)))) q(rule(0,(__aux,),())) q(rule(0,(__aux,),(a,b))) q(rule(0,(a,),(theory(a,(elem((+(1,2),"test"),(a,b)),)),))) q(rule(0,(b,),(theory(b(3),(),=,17),))) q(rule(1,(a,b),(__aux,))) q(weight_rule(0,(__aux,),1,((a,1),(b,1))))
b q(acyc_edge(0,1,(a,b))) q(assume((neg(b),))) q(begin_step) q(end_step) q(external(a,"False_")) q(heuristic(a,"Sign",1,(b,))) q(init_program(1)) q(minimize(0,((a,1),(b,2)))) q(output_atom(a)) q(output_atom(b)) q(output_term(x,(__aux,))) q(project((a,))) q(rule(0,(),(__aux,neg(__aux)))) q(rule(0,(__aux,),())) q(rule(0,(__aux,),(a,b))) q(rule(0,(a,),(theory(a,(elem((+(1,2),"test"),(a,b)),)),))) q(rule(0,(b,),(theory(b(3),(),=,17),))) q(rule(1,(a,b),(__aux,))) q(weight_rule(0,(__aux,),1,((a,1),(b,1))))
SAT
