# ------------------------------------------------------------------------------
#  Copyright Christopher Kormanyos 2020 - 2023.
#  Distributed under the Boost Software License,
#  Version 1.0. (See accompanying file LICENSE_1_0.txt
#  or copy at http://www.boost.org/LICENSE_1_0.txt)
# ------------------------------------------------------------------------------

name: wide_integer
on:
  push:
    branches:
      - '**'
  pull_request:
  schedule:
    - cron: '0 2 * * *' # run at 2 AM UTC
jobs:
  cmake-linux:
    strategy:
      fail-fast: false
      matrix:
        compiler: [ g++, clang++ ]
        include:
          - compiler: g++
            clang_tidy: ""
            container: johnmcfarlane/cnl_ci:gcc-11
          - compiler: clang++
            clang_tidy: "clang-tidy"
            container: johnmcfarlane/cnl_ci:clang-13-libcpp
    runs-on: ubuntu-latest
    container: ${{matrix.container}}
    steps:
      - uses: actions/checkout@v3
      - name: create build directory
        run: mkdir $GITHUB_WORKSPACE/build
      - name: install Boost
        run: |
          apt-get update --quiet
          apt-get install --no-install-recommends --quiet --yes libboost-dev
      - name: build
        working-directory: build
        run: |
          cmake \
              -DCMAKE_BUILD_TYPE=Release \
              -DCMAKE_CXX_STANDARD=20 \
              -DCMAKE_CXX_CLANG_TIDY="${{matrix.clang_tidy}}" \
              -DCMAKE_TOOLCHAIN_FILE=$GITHUB_WORKSPACE/.github/toolchains/gcc.cmake \
              -GNinja \
              $GITHUB_WORKSPACE
          cmake --build .
      - name: test
        working-directory: build
        run: ctest --verbose --output-on-failure
  cmake-windows:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v3
      - name: clone-boost-develop
        working-directory: ${{runner.workspace}}
        run: |
          git clone -b develop --depth 1 https://github.com/boostorg/boost.git ${{runner.workspace}}/boost-root
      - name: clone-submods
        working-directory: ${{runner.workspace}}/boost-root
        run: |
          git submodule update --init tools
          git submodule update --init libs/config
          git submodule update --init libs/multiprecision
      - name: bootstrap-boost
        working-directory: ${{runner.workspace}}/boost-root
        run: |
          ./bootstrap.bat
          ./b2 headers
      - name: create build directory
        run: mkdir ${{runner.workspace}}/build
      - name: build
        shell: cmd
        working-directory: ${{runner.workspace}}/build
        run: |
          set BOOST_ROOT=${{runner.workspace}}\boost-root
          cmake -DCMAKE_CXX_FLAGS="/W4 /WX /EHsc" -DCMAKE_CXX_STANDARD=20 ..\wide-integer
          cmake --build . --config Release
      - name: test
        working-directory: ${{runner.workspace}}/build
        run: ctest --verbose --output-on-failure
  gnumake-clang-tidy-12-native:
    runs-on: ubuntu-22.04
    defaults:
      run:
        shell: bash
    strategy:
      fail-fast: false
      matrix:
        standard: [ c++20 ]
        compiler: [ g++, clang++ ]
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: '0'
      - name: update-tools
        run: sudo apt install clang clang-tidy
      - name: clone-submods-bootstrap-headers-boost-develop
        run: |
          git clone -b develop --depth 1 https://github.com/boostorg/boost.git ../boost-root
          cd ../boost-root
          git submodule update --init tools
          git submodule update --init libs/config
          git submodule update --init libs/multiprecision
          ./bootstrap.sh
          ./b2 headers
      - name: gnumake-clang-tidy-12-native
        run: |
          grep BOOST_VERSION ../boost-root/boost/version.hpp
          cd .tidy/make
          echo "running clang-tidy"
          echo "make prepare -f make_tidy_01_generic.gmk MY_BOOST_ROOT=../../../boost-root MY_CC=${{ matrix.compiler }} MY_STD=${{ matrix.standard }}"
          echo
          make prepare -f make_tidy_01_generic.gmk MY_BOOST_ROOT=../../../boost-root MY_CC=${{ matrix.compiler }} MY_STD=${{ matrix.standard }}
          echo "make tidy -f make_tidy_01_generic.gmk --jobs=8 MY_BOOST_ROOT=../../../boost-root MY_CC=${{ matrix.compiler }} MY_STD=${{ matrix.standard }}"
          make tidy -f make_tidy_01_generic.gmk --jobs=8 MY_BOOST_ROOT=../../../boost-root MY_CC=${{ matrix.compiler }} MY_STD=${{ matrix.standard }}
          echo
          echo "verify empty word count of ./tmp/all.tidy_txt"
          wc ./tmp/all.tidy_txt | grep '0 0 0'
  gcc-clang-native:
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
    strategy:
      fail-fast: false
      matrix:
        standard: [ c++14, c++17, c++2a ]
        compiler: [ g++, clang++ ]
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: '0'
      - name: clone-submods-bootstrap-headers-boost-develop
        run: |
          git clone -b develop --depth 1 https://github.com/boostorg/boost.git ../boost-root
          cd ../boost-root
          git submodule update --init tools
          git submodule update --init libs/config
          git submodule update --init libs/multiprecision
          ./bootstrap.sh
          ./b2 headers
      - name: gcc-clang-native
        run: |
          grep BOOST_VERSION ../boost-root/boost/version.hpp
          echo "compile ./wide_integer.exe"
          ${{ matrix.compiler }} -v
          ${{ matrix.compiler }} -finline-functions -m64 -O3 -Werror -Wall -Wextra -Wpedantic -Wconversion -Wsign-conversion -Wshadow -Wundef -Wunused-parameter -Wuninitialized -Wunreachable-code -Winit-self -Wzero-as-null-pointer-constant -std=${{ matrix.standard }} -DWIDE_INTEGER_HAS_LIMB_TYPE_UINT64 -I. -I../boost-root -pthread -lpthread  test/test.cpp test/test_uintwide_t_boost_backend.cpp test/test_uintwide_t_edge_cases.cpp test/test_uintwide_t_examples.cpp test/test_uintwide_t_float_convert.cpp test/test_uintwide_t_int_convert.cpp test/test_uintwide_t_n_base.cpp test/test_uintwide_t_n_binary_ops_base.cpp test/test_uintwide_t_spot_values.cpp examples/example000_numeric_limits.cpp examples/example000a_builtin_convert.cpp examples/example001_mul_div.cpp examples/example001a_div_mod.cpp examples/example002_shl_shr.cpp examples/example003_sqrt.cpp examples/example003a_cbrt.cpp examples/example004_rootk_pow.cpp examples/example005_powm.cpp examples/example005a_pow_factors_of_p99.cpp examples/example006_gcd.cpp examples/example007_random_generator.cpp examples/example008_miller_rabin_prime.cpp examples/example008a_miller_rabin_prime.cpp examples/example009_timed_mul.cpp examples/example009a_timed_mul_4_by_4.cpp examples/example009b_timed_mul_8_by_8.cpp examples/example010_uint48_t.cpp examples/example011_uint24_t.cpp examples/example012_rsa_crypto.cpp examples/example013_ecdsa_sign_verify.cpp examples/example014_pi_spigot_wide.cpp -o wide_integer.exe
          echo "ls ./wide_integer.exe"
          ls -la ./wide_integer.exe
          ./wide_integer.exe
  gcc-clang-native-representation-as-std-list:
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
    strategy:
      fail-fast: false
      matrix:
        standard: [ c++14 ]
        compiler: [ g++ ]
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: '0'
      - name: clone-submods-bootstrap-headers-boost-develop
        run: |
          git clone -b develop --depth 1 https://github.com/boostorg/boost.git ../boost-root
          cd ../boost-root
          git submodule update --init tools
          git submodule update --init libs/config
          git submodule update --init libs/multiprecision
          ./bootstrap.sh
          ./b2 headers
      - name: gcc-clang-native-representation-as-std-list
        run: |
          grep BOOST_VERSION ../boost-root/boost/version.hpp
          echo "compile ./wide_integer.exe"
          ${{ matrix.compiler }} -v
          ${{ matrix.compiler }} -finline-functions -m64 -O3 -Werror -Wall -Wextra -Wpedantic -Wconversion -Wsign-conversion -Wshadow -Wundef -Wunused-parameter -Wuninitialized -Wunreachable-code -Winit-self -Wzero-as-null-pointer-constant -std=${{ matrix.standard }} -DWIDE_INTEGER_TEST_REPRESENTATION_AS_STD_LIST -I. -I../boost-root -pthread -lpthread  test/test.cpp test/test_uintwide_t_boost_backend.cpp test/test_uintwide_t_edge_cases.cpp test/test_uintwide_t_examples.cpp test/test_uintwide_t_float_convert.cpp test/test_uintwide_t_int_convert.cpp test/test_uintwide_t_n_base.cpp test/test_uintwide_t_n_binary_ops_base.cpp test/test_uintwide_t_spot_values.cpp examples/example000_numeric_limits.cpp examples/example000a_builtin_convert.cpp examples/example001_mul_div.cpp examples/example001a_div_mod.cpp examples/example002_shl_shr.cpp examples/example003_sqrt.cpp examples/example003a_cbrt.cpp examples/example004_rootk_pow.cpp examples/example005_powm.cpp examples/example005a_pow_factors_of_p99.cpp examples/example006_gcd.cpp examples/example007_random_generator.cpp examples/example008_miller_rabin_prime.cpp examples/example008a_miller_rabin_prime.cpp examples/example009_timed_mul.cpp examples/example009a_timed_mul_4_by_4.cpp examples/example009b_timed_mul_8_by_8.cpp examples/example010_uint48_t.cpp examples/example011_uint24_t.cpp examples/example012_rsa_crypto.cpp examples/example013_ecdsa_sign_verify.cpp examples/example014_pi_spigot_wide.cpp -o wide_integer.exe
          echo "ls ./wide_integer.exe"
          ls -la ./wide_integer.exe
          ./wide_integer.exe
  gcc-clang-native-limb_type_uint64_t:
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
    strategy:
      fail-fast: false
      matrix:
        standard: [ gnu++14, gnu++17, gnu++2a ]
        compiler: [ g++, clang++ ]
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: '0'
      - name: clone-submods-bootstrap-headers-boost-develop
        run: |
          git clone -b develop --depth 1 https://github.com/boostorg/boost.git ../boost-root
          cd ../boost-root
          git submodule update --init tools
          git submodule update --init libs/config
          git submodule update --init libs/multiprecision
          ./bootstrap.sh
          ./b2 headers
      - name: gcc-clang-native-limb_type_uint64_t
        run: |
          grep BOOST_VERSION ../boost-root/boost/version.hpp
          echo "compile ./wide_integer.exe"
          ${{ matrix.compiler }} -v
          ${{ matrix.compiler }} -finline-functions -m64 -O3 -Werror -Wall -Wextra -Wpedantic -Wconversion -Wsign-conversion -Wshadow -Wundef -Wunused-parameter -Wuninitialized -Wunreachable-code -Winit-self -Wzero-as-null-pointer-constant -std=${{ matrix.standard }} -DWIDE_INTEGER_HAS_LIMB_TYPE_UINT64 -DWIDE_INTEGER_HAS_MUL_8_BY_8_UNROLL -I. -I../boost-root -pthread -lpthread  test/test.cpp test/test_uintwide_t_boost_backend.cpp test/test_uintwide_t_edge_cases.cpp test/test_uintwide_t_examples.cpp test/test_uintwide_t_float_convert.cpp test/test_uintwide_t_int_convert.cpp test/test_uintwide_t_n_base.cpp test/test_uintwide_t_n_binary_ops_base.cpp test/test_uintwide_t_spot_values.cpp examples/example000_numeric_limits.cpp examples/example000a_builtin_convert.cpp examples/example001_mul_div.cpp examples/example001a_div_mod.cpp examples/example002_shl_shr.cpp examples/example003_sqrt.cpp examples/example003a_cbrt.cpp examples/example004_rootk_pow.cpp examples/example005_powm.cpp examples/example005a_pow_factors_of_p99.cpp examples/example006_gcd.cpp examples/example007_random_generator.cpp examples/example008_miller_rabin_prime.cpp examples/example008a_miller_rabin_prime.cpp examples/example009_timed_mul.cpp examples/example009a_timed_mul_4_by_4.cpp examples/example009b_timed_mul_8_by_8.cpp examples/example010_uint48_t.cpp examples/example011_uint24_t.cpp examples/example012_rsa_crypto.cpp examples/example013_ecdsa_sign_verify.cpp examples/example014_pi_spigot_wide.cpp -o wide_integer.exe
          echo "ls ./wide_integer.exe"
          ls -la ./wide_integer.exe
          ./wide_integer.exe
  gcc-11-clang-12_wide_integer_namespace:
    runs-on: ubuntu-22.04
    defaults:
      run:
        shell: bash
    strategy:
      fail-fast: false
      matrix:
        standard: [ c++14, c++17, c++20 ]
        compiler: [ g++-11, clang++-12 ]
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: '0'
      - name: update-tools
        run: sudo apt install g++-11 clang-12
      - name: clone-submods-bootstrap-headers-boost-develop
        run: |
          git clone -b develop --depth 1 https://github.com/boostorg/boost.git ../boost-root
          cd ../boost-root
          git submodule update --init tools
          git submodule update --init libs/config
          git submodule update --init libs/multiprecision
          ./bootstrap.sh
          ./b2 headers
      - name: gcc-11-clang-12_wide_integer_namespace
        run: |
          grep BOOST_VERSION ../boost-root/boost/version.hpp
          echo "compile ./wide_integer.exe"
          ${{ matrix.compiler }} -v
          ${{ matrix.compiler }} -finline-functions -m64 -O3 -Werror -Wall -Wextra -Wpedantic -Wconversion -Wsign-conversion -Wshadow -Wundef -Wunused-parameter -Wuninitialized -Wunreachable-code -Winit-self -Wzero-as-null-pointer-constant -std=${{ matrix.standard }} -DWIDE_INTEGER_NAMESPACE=ckormanyos -DWIDE_INTEGER_HAS_LIMB_TYPE_UINT64 -I. -I../boost-root -pthread -lpthread  test/test.cpp test/test_uintwide_t_boost_backend.cpp test/test_uintwide_t_edge_cases.cpp test/test_uintwide_t_examples.cpp test/test_uintwide_t_float_convert.cpp test/test_uintwide_t_int_convert.cpp test/test_uintwide_t_n_base.cpp test/test_uintwide_t_n_binary_ops_base.cpp test/test_uintwide_t_spot_values.cpp examples/example000_numeric_limits.cpp examples/example000a_builtin_convert.cpp examples/example001_mul_div.cpp examples/example001a_div_mod.cpp examples/example002_shl_shr.cpp examples/example003_sqrt.cpp examples/example003a_cbrt.cpp examples/example004_rootk_pow.cpp examples/example005_powm.cpp examples/example005a_pow_factors_of_p99.cpp examples/example006_gcd.cpp examples/example007_random_generator.cpp examples/example008_miller_rabin_prime.cpp examples/example008a_miller_rabin_prime.cpp examples/example009_timed_mul.cpp examples/example009a_timed_mul_4_by_4.cpp examples/example009b_timed_mul_8_by_8.cpp examples/example010_uint48_t.cpp examples/example011_uint24_t.cpp examples/example012_rsa_crypto.cpp examples/example013_ecdsa_sign_verify.cpp examples/example014_pi_spigot_wide.cpp -o wide_integer.exe
          echo "ls ./wide_integer.exe"
          ls -la ./wide_integer.exe
          ./wide_integer.exe
  gcc-12-clang-14:
    runs-on: ubuntu-22.04
    defaults:
      run:
        shell: bash
    strategy:
      fail-fast: false
      matrix:
        standard: [ c++14, c++17, c++20, c++2b ]
        compiler: [ g++-12, clang++-14 ]
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: '0'
      - name: update-tools
        run: sudo apt install g++-12 clang-14
      - name: clone-submods-bootstrap-headers-boost-develop
        run: |
          git clone -b develop --depth 1 https://github.com/boostorg/boost.git ../boost-root
          cd ../boost-root
          git submodule update --init tools
          git submodule update --init libs/config
          git submodule update --init libs/multiprecision
          ./bootstrap.sh
          ./b2 headers
      - name: gcc-12-clang-14
        run: |
          grep BOOST_VERSION ../boost-root/boost/version.hpp
          echo "compile ./wide_integer.exe"
          ${{ matrix.compiler }} -v
          ${{ matrix.compiler }} -finline-functions -m64 -O3 -Werror -Wall -Wextra -Wpedantic -Wconversion -Wsign-conversion -Wshadow -Wundef -Wunused-parameter -Wuninitialized -Wunreachable-code -Winit-self -Wzero-as-null-pointer-constant -std=${{ matrix.standard }} -DWIDE_INTEGER_HAS_LIMB_TYPE_UINT64 -I. -I../boost-root -pthread -lpthread  test/test.cpp test/test_uintwide_t_boost_backend.cpp test/test_uintwide_t_edge_cases.cpp test/test_uintwide_t_examples.cpp test/test_uintwide_t_float_convert.cpp test/test_uintwide_t_int_convert.cpp test/test_uintwide_t_n_base.cpp test/test_uintwide_t_n_binary_ops_base.cpp test/test_uintwide_t_spot_values.cpp examples/example000_numeric_limits.cpp examples/example000a_builtin_convert.cpp examples/example001_mul_div.cpp examples/example001a_div_mod.cpp examples/example002_shl_shr.cpp examples/example003_sqrt.cpp examples/example003a_cbrt.cpp examples/example004_rootk_pow.cpp examples/example005_powm.cpp examples/example005a_pow_factors_of_p99.cpp examples/example006_gcd.cpp examples/example007_random_generator.cpp examples/example008_miller_rabin_prime.cpp examples/example008a_miller_rabin_prime.cpp examples/example009_timed_mul.cpp examples/example009a_timed_mul_4_by_4.cpp examples/example009b_timed_mul_8_by_8.cpp examples/example010_uint48_t.cpp examples/example011_uint24_t.cpp examples/example012_rsa_crypto.cpp examples/example013_ecdsa_sign_verify.cpp examples/example014_pi_spigot_wide.cpp -o wide_integer.exe
          echo "ls ./wide_integer.exe"
          ls -la ./wide_integer.exe
          ./wide_integer.exe
  gcc-clang-10_up:
    runs-on: ubuntu-20.04
    defaults:
      run:
        shell: bash
    strategy:
      fail-fast: false
      matrix:
        standard: [ c++14, c++17, c++20 ]
        compiler: [ g++-10, clang++-10, clang++-11, clang++-12 ]
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: '0'
      - name: update-tools
        run: sudo apt install g++-10 clang-10 clang-11 clang-12
      - name: clone-submods-bootstrap-headers-boost-develop
        run: |
          git clone -b develop --depth 1 https://github.com/boostorg/boost.git ../boost-root
          cd ../boost-root
          git submodule update --init tools
          git submodule update --init libs/config
          git submodule update --init libs/multiprecision
          ./bootstrap.sh
          ./b2 headers
      - name: gcc-clang-10_up
        run: |
          grep BOOST_VERSION ../boost-root/boost/version.hpp
          echo "compile ./wide_integer.exe"
          ${{ matrix.compiler }} -v
          ${{ matrix.compiler }} -finline-functions -m64 -O3 -Werror -Wall -Wextra -Wpedantic -Wconversion -Wsign-conversion -Wshadow -Wundef -Wunused-parameter -Wuninitialized -Wunreachable-code -Winit-self -Wzero-as-null-pointer-constant -std=${{ matrix.standard }} -DWIDE_INTEGER_HAS_LIMB_TYPE_UINT64 -I. -I../boost-root -pthread -lpthread  test/test.cpp test/test_uintwide_t_boost_backend.cpp test/test_uintwide_t_edge_cases.cpp test/test_uintwide_t_examples.cpp test/test_uintwide_t_float_convert.cpp test/test_uintwide_t_int_convert.cpp test/test_uintwide_t_n_base.cpp test/test_uintwide_t_n_binary_ops_base.cpp test/test_uintwide_t_spot_values.cpp examples/example000_numeric_limits.cpp examples/example000a_builtin_convert.cpp examples/example001_mul_div.cpp examples/example001a_div_mod.cpp examples/example002_shl_shr.cpp examples/example003_sqrt.cpp examples/example003a_cbrt.cpp examples/example004_rootk_pow.cpp examples/example005_powm.cpp examples/example005a_pow_factors_of_p99.cpp examples/example006_gcd.cpp examples/example007_random_generator.cpp examples/example008_miller_rabin_prime.cpp examples/example008a_miller_rabin_prime.cpp examples/example009_timed_mul.cpp examples/example009a_timed_mul_4_by_4.cpp examples/example009b_timed_mul_8_by_8.cpp examples/example010_uint48_t.cpp examples/example011_uint24_t.cpp examples/example012_rsa_crypto.cpp examples/example013_ecdsa_sign_verify.cpp examples/example014_pi_spigot_wide.cpp -o wide_integer.exe
          echo "ls ./wide_integer.exe"
          ls -la ./wide_integer.exe
          ./wide_integer.exe
  gcc-clang-7-9:
    runs-on: ubuntu-20.04
    defaults:
      run:
        shell: bash
    strategy:
      fail-fast: false
      matrix:
        standard: [ c++14, c++17 ]
        compiler: [ g++-7, g++-8, g++-9, clang++-8, clang++-9 ]
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: '0'
      - name: update-tools
        run: sudo apt install g++-7 g++-8 g++-9 clang-8 clang-9
      - name: clone-submods-bootstrap-headers-boost-develop
        run: |
          git clone -b develop --depth 1 https://github.com/boostorg/boost.git ../boost-root
          cd ../boost-root
          git submodule update --init tools
          git submodule update --init libs/config
          git submodule update --init libs/multiprecision
          ./bootstrap.sh
          ./b2 headers
      - name: gcc-clang-7-9
        run: |
          grep BOOST_VERSION ../boost-root/boost/version.hpp
          echo "compile ./wide_integer.exe"
          ${{ matrix.compiler }} -v
          ${{ matrix.compiler }} -finline-functions -m64 -O3 -Werror -Wall -Wextra -Wpedantic -Wconversion -Wsign-conversion -Wshadow -Wundef -Wunused-parameter -Wuninitialized -Wunreachable-code -Winit-self -Wzero-as-null-pointer-constant -std=${{ matrix.standard }} -DWIDE_INTEGER_HAS_LIMB_TYPE_UINT64 -I. -I../boost-root -pthread -lpthread  test/test.cpp test/test_uintwide_t_boost_backend.cpp test/test_uintwide_t_edge_cases.cpp test/test_uintwide_t_examples.cpp test/test_uintwide_t_float_convert.cpp test/test_uintwide_t_int_convert.cpp test/test_uintwide_t_n_base.cpp test/test_uintwide_t_n_binary_ops_base.cpp test/test_uintwide_t_spot_values.cpp examples/example000_numeric_limits.cpp examples/example000a_builtin_convert.cpp examples/example001_mul_div.cpp examples/example001a_div_mod.cpp examples/example002_shl_shr.cpp examples/example003_sqrt.cpp examples/example003a_cbrt.cpp examples/example004_rootk_pow.cpp examples/example005_powm.cpp examples/example005a_pow_factors_of_p99.cpp examples/example006_gcd.cpp examples/example007_random_generator.cpp examples/example008_miller_rabin_prime.cpp examples/example008a_miller_rabin_prime.cpp examples/example009_timed_mul.cpp examples/example009a_timed_mul_4_by_4.cpp examples/example009b_timed_mul_8_by_8.cpp examples/example010_uint48_t.cpp examples/example011_uint24_t.cpp examples/example012_rsa_crypto.cpp examples/example013_ecdsa_sign_verify.cpp examples/example014_pi_spigot_wide.cpp -o wide_integer.exe
          echo "ls ./wide_integer.exe"
          ls -la ./wide_integer.exe
          ./wide_integer.exe
  gcc-clang-native-asan:
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
    strategy:
      fail-fast: false
      matrix:
        standard: [ c++14, c++17, c++2a ]
        compiler: [ g++, clang++ ]
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: '0'
      - name: clone-submods-bootstrap-headers-boost-develop
        run: |
          git clone -b develop --depth 1 https://github.com/boostorg/boost.git ../boost-root
          cd ../boost-root
          git submodule update --init tools
          git submodule update --init libs/config
          git submodule update --init libs/multiprecision
          ./bootstrap.sh
          ./b2 headers
      - name: gcc-clang-native-asan
        run: |
          grep BOOST_VERSION ../boost-root/boost/version.hpp
          echo "compile ./wide_integer.exe"
          ${{ matrix.compiler }} -v
          ${{ matrix.compiler }} -finline-functions -fsanitize=address -fsanitize=leak -m64 -O3 -Werror -Wall -Wextra -Wpedantic -Wconversion -Wsign-conversion -Wshadow -Wundef -Wunused-parameter -Wuninitialized -Wunreachable-code -Winit-self -Wzero-as-null-pointer-constant -std=${{ matrix.standard }} -DWIDE_INTEGER_HAS_LIMB_TYPE_UINT64 -I. -I../boost-root -pthread -lpthread  test/test.cpp test/test_uintwide_t_boost_backend.cpp test/test_uintwide_t_edge_cases.cpp test/test_uintwide_t_examples.cpp test/test_uintwide_t_float_convert.cpp test/test_uintwide_t_int_convert.cpp test/test_uintwide_t_n_base.cpp test/test_uintwide_t_n_binary_ops_base.cpp test/test_uintwide_t_spot_values.cpp examples/example000_numeric_limits.cpp examples/example000a_builtin_convert.cpp examples/example001_mul_div.cpp examples/example001a_div_mod.cpp examples/example002_shl_shr.cpp examples/example003_sqrt.cpp examples/example003a_cbrt.cpp examples/example004_rootk_pow.cpp examples/example005_powm.cpp examples/example005a_pow_factors_of_p99.cpp examples/example006_gcd.cpp examples/example007_random_generator.cpp examples/example008_miller_rabin_prime.cpp examples/example008a_miller_rabin_prime.cpp examples/example009_timed_mul.cpp examples/example009a_timed_mul_4_by_4.cpp examples/example009b_timed_mul_8_by_8.cpp examples/example010_uint48_t.cpp examples/example011_uint24_t.cpp examples/example012_rsa_crypto.cpp examples/example013_ecdsa_sign_verify.cpp examples/example014_pi_spigot_wide.cpp -o wide_integer.exe
          echo "ls ./wide_integer.exe"
          ls -la ./wide_integer.exe
          ./wide_integer.exe
  gcc-clang-native-asan-clz:
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
    strategy:
      fail-fast: false
      matrix:
        compiler: [ g++, clang++ ]
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: '0'
      - name: clone-submods-bootstrap-headers-boost-develop
        run: |
          git clone -b develop --depth 1 https://github.com/boostorg/boost.git ../boost-root
          cd ../boost-root
          git submodule update --init tools
          git submodule update --init libs/config
          git submodule update --init libs/multiprecision
          ./bootstrap.sh
          ./b2 headers
      - name: gcc-clang-native-asan-clz
        run: |
          grep BOOST_VERSION ../boost-root/boost/version.hpp
          echo "compile ./wide_integer.exe"
          ${{ matrix.compiler }} -v
          ${{ matrix.compiler }} -finline-functions -fsanitize=address -fsanitize=leak -m64 -O3 -Werror -Wall -Wextra -Wpedantic -Wconversion -Wsign-conversion -Wshadow -Wundef -Wunused-parameter -Wuninitialized -Wunreachable-code -Winit-self -Wzero-as-null-pointer-constant -std=c++14 -DWIDE_INTEGER_HAS_CLZ_LIMB_OPTIMIZATIONS -DWIDE_INTEGER_HAS_LIMB_TYPE_UINT64 -I. -I../boost-root -pthread -lpthread  test/test.cpp test/test_uintwide_t_boost_backend.cpp test/test_uintwide_t_edge_cases.cpp test/test_uintwide_t_examples.cpp test/test_uintwide_t_float_convert.cpp test/test_uintwide_t_int_convert.cpp test/test_uintwide_t_n_base.cpp test/test_uintwide_t_n_binary_ops_base.cpp test/test_uintwide_t_spot_values.cpp examples/example000_numeric_limits.cpp examples/example000a_builtin_convert.cpp examples/example001_mul_div.cpp examples/example001a_div_mod.cpp examples/example002_shl_shr.cpp examples/example003_sqrt.cpp examples/example003a_cbrt.cpp examples/example004_rootk_pow.cpp examples/example005_powm.cpp examples/example005a_pow_factors_of_p99.cpp examples/example006_gcd.cpp examples/example007_random_generator.cpp examples/example008_miller_rabin_prime.cpp examples/example008a_miller_rabin_prime.cpp examples/example009_timed_mul.cpp examples/example009a_timed_mul_4_by_4.cpp examples/example009b_timed_mul_8_by_8.cpp examples/example010_uint48_t.cpp examples/example011_uint24_t.cpp examples/example012_rsa_crypto.cpp examples/example013_ecdsa_sign_verify.cpp examples/example014_pi_spigot_wide.cpp -o wide_integer.exe
          echo "ls ./wide_integer.exe"
          ls -la ./wide_integer.exe
          ./wide_integer.exe
  gcc-clang-native-ubsan:
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
    strategy:
      fail-fast: false
      matrix:
        standard: [ c++14, c++17, c++2a ]
        compiler: [ g++, clang++ ]
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: '0'
      - name: clone-submods-bootstrap-headers-boost-develop
        run: |
          git clone -b develop --depth 1 https://github.com/boostorg/boost.git ../boost-root
          cd ../boost-root
          git submodule update --init tools
          git submodule update --init libs/config
          git submodule update --init libs/multiprecision
          ./bootstrap.sh
          ./b2 headers
      - name: gcc-clang-native-ubsan
        run: |
          grep BOOST_VERSION ../boost-root/boost/version.hpp
          echo "compile ./wide_integer.exe"
          ${{ matrix.compiler }} -v
          ${{ matrix.compiler }} -finline-functions -finline-functions -fsanitize=shift -fsanitize=shift-exponent -fsanitize=shift-base -fsanitize=integer-divide-by-zero -fsanitize=null -fsanitize=signed-integer-overflow -fsanitize=bounds -fsanitize=alignment -fsanitize=float-divide-by-zero -fsanitize=float-cast-overflow -fsanitize=enum -m64 -O3 -Werror -Wall -Wextra -Wpedantic -Wconversion -Wsign-conversion -Wshadow -Wundef -Wunused-parameter -Wuninitialized -Wunreachable-code -Winit-self -Wzero-as-null-pointer-constant -std=${{ matrix.standard }} -DWIDE_INTEGER_HAS_LIMB_TYPE_UINT64 -I. -I../boost-root -pthread -lpthread  test/test.cpp test/test_uintwide_t_boost_backend.cpp test/test_uintwide_t_edge_cases.cpp test/test_uintwide_t_examples.cpp test/test_uintwide_t_float_convert.cpp test/test_uintwide_t_int_convert.cpp test/test_uintwide_t_n_base.cpp test/test_uintwide_t_n_binary_ops_base.cpp test/test_uintwide_t_spot_values.cpp examples/example000_numeric_limits.cpp examples/example000a_builtin_convert.cpp examples/example001_mul_div.cpp examples/example001a_div_mod.cpp examples/example002_shl_shr.cpp examples/example003_sqrt.cpp examples/example003a_cbrt.cpp examples/example004_rootk_pow.cpp examples/example005_powm.cpp examples/example005a_pow_factors_of_p99.cpp examples/example006_gcd.cpp examples/example007_random_generator.cpp examples/example008_miller_rabin_prime.cpp examples/example008a_miller_rabin_prime.cpp examples/example009_timed_mul.cpp examples/example009a_timed_mul_4_by_4.cpp examples/example009b_timed_mul_8_by_8.cpp examples/example010_uint48_t.cpp examples/example011_uint24_t.cpp examples/example012_rsa_crypto.cpp examples/example013_ecdsa_sign_verify.cpp examples/example014_pi_spigot_wide.cpp -o wide_integer.exe
          echo "ls ./wide_integer.exe"
          ls -la ./wide_integer.exe
          ./wide_integer.exe
  gcc-clang-native-ubsan-limb_type_uint64_t:
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
    strategy:
      fail-fast: false
      matrix:
        standard: [ gnu++14, gnu++17, gnu++2a ]
        compiler: [ g++, clang++ ]
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: '0'
      - name: clone-submods-bootstrap-headers-boost-develop
        run: |
          git clone -b develop --depth 1 https://github.com/boostorg/boost.git ../boost-root
          cd ../boost-root
          git submodule update --init tools
          git submodule update --init libs/config
          git submodule update --init libs/multiprecision
          ./bootstrap.sh
          ./b2 headers
      - name: gcc-clang-native-ubsan-limb_type_uint64_t
        run: |
          grep BOOST_VERSION ../boost-root/boost/version.hpp
          echo "compile ./wide_integer.exe"
          ${{ matrix.compiler }} -v
          ${{ matrix.compiler }} -finline-functions -finline-functions -fsanitize=shift -fsanitize=shift-exponent -fsanitize=shift-base -fsanitize=integer-divide-by-zero -fsanitize=null -fsanitize=signed-integer-overflow -fsanitize=bounds -fsanitize=alignment -fsanitize=float-divide-by-zero -fsanitize=float-cast-overflow -fsanitize=enum -m64 -O3 -Werror -Wall -Wextra -Wpedantic -Wconversion -Wsign-conversion -Wshadow -Wundef -Wunused-parameter -Wuninitialized -Wunreachable-code -Winit-self -Wzero-as-null-pointer-constant -std=${{ matrix.standard }} -DWIDE_INTEGER_HAS_LIMB_TYPE_UINT64 -DWIDE_INTEGER_HAS_LIMB_TYPE_UINT64 -I. -I../boost-root -pthread -lpthread  test/test.cpp test/test_uintwide_t_boost_backend.cpp test/test_uintwide_t_edge_cases.cpp test/test_uintwide_t_examples.cpp test/test_uintwide_t_float_convert.cpp test/test_uintwide_t_int_convert.cpp test/test_uintwide_t_n_base.cpp test/test_uintwide_t_n_binary_ops_base.cpp test/test_uintwide_t_spot_values.cpp examples/example000_numeric_limits.cpp examples/example000a_builtin_convert.cpp examples/example001_mul_div.cpp examples/example001a_div_mod.cpp examples/example002_shl_shr.cpp examples/example003_sqrt.cpp examples/example003a_cbrt.cpp examples/example004_rootk_pow.cpp examples/example005_powm.cpp examples/example005a_pow_factors_of_p99.cpp examples/example006_gcd.cpp examples/example007_random_generator.cpp examples/example008_miller_rabin_prime.cpp examples/example008a_miller_rabin_prime.cpp examples/example009_timed_mul.cpp examples/example009a_timed_mul_4_by_4.cpp examples/example009b_timed_mul_8_by_8.cpp examples/example010_uint48_t.cpp examples/example011_uint24_t.cpp examples/example012_rsa_crypto.cpp examples/example013_ecdsa_sign_verify.cpp examples/example014_pi_spigot_wide.cpp -o wide_integer.exe
          echo "ls ./wide_integer.exe"
          ls -la ./wide_integer.exe
          ./wide_integer.exe
  gcc-clang-native-ubsan-clz:
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
    strategy:
      fail-fast: false
      matrix:
        compiler: [ g++, clang++ ]
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: '0'
      - name: clone-submods-bootstrap-headers-boost-develop
        run: |
          git clone -b develop --depth 1 https://github.com/boostorg/boost.git ../boost-root
          cd ../boost-root
          git submodule update --init tools
          git submodule update --init libs/config
          git submodule update --init libs/multiprecision
          ./bootstrap.sh
          ./b2 headers
      - name: gcc-clang-native-ubsan
        run: |
          grep BOOST_VERSION ../boost-root/boost/version.hpp
          echo "compile ./wide_integer.exe"
          ${{ matrix.compiler }} -v
          ${{ matrix.compiler }} -finline-functions -finline-functions -fsanitize=shift -fsanitize=shift-exponent -fsanitize=shift-base -fsanitize=integer-divide-by-zero -fsanitize=null -fsanitize=signed-integer-overflow -fsanitize=bounds -fsanitize=alignment -fsanitize=float-divide-by-zero -fsanitize=float-cast-overflow -fsanitize=enum -m64 -O3 -Werror -Wall -Wextra -Wpedantic -Wconversion -Wsign-conversion -Wshadow -Wundef -Wunused-parameter -Wuninitialized -Wunreachable-code -Winit-self -Wzero-as-null-pointer-constant -std=c++14 -DWIDE_INTEGER_HAS_CLZ_LIMB_OPTIMIZATIONS -DWIDE_INTEGER_HAS_LIMB_TYPE_UINT64 -I. -I../boost-root -pthread -lpthread  test/test.cpp test/test_uintwide_t_boost_backend.cpp test/test_uintwide_t_edge_cases.cpp test/test_uintwide_t_examples.cpp test/test_uintwide_t_float_convert.cpp test/test_uintwide_t_int_convert.cpp test/test_uintwide_t_n_base.cpp test/test_uintwide_t_n_binary_ops_base.cpp test/test_uintwide_t_spot_values.cpp examples/example000_numeric_limits.cpp examples/example000a_builtin_convert.cpp examples/example001_mul_div.cpp examples/example001a_div_mod.cpp examples/example002_shl_shr.cpp examples/example003_sqrt.cpp examples/example003a_cbrt.cpp examples/example004_rootk_pow.cpp examples/example005_powm.cpp examples/example005a_pow_factors_of_p99.cpp examples/example006_gcd.cpp examples/example007_random_generator.cpp examples/example008_miller_rabin_prime.cpp examples/example008a_miller_rabin_prime.cpp examples/example009_timed_mul.cpp examples/example009a_timed_mul_4_by_4.cpp examples/example009b_timed_mul_8_by_8.cpp examples/example010_uint48_t.cpp examples/example011_uint24_t.cpp examples/example012_rsa_crypto.cpp examples/example013_ecdsa_sign_verify.cpp examples/example014_pi_spigot_wide.cpp -o wide_integer.exe
          echo "ls ./wide_integer.exe"
          ls -la ./wide_integer.exe
          ./wide_integer.exe
  gcc-clang-native-tsan:
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
    strategy:
      fail-fast: false
      matrix:
        standard: [ c++14, c++17, c++2a ]
        compiler: [ g++, clang++ ]
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: '0'
      - name: clone-submods-bootstrap-headers-boost-develop
        run: |
          git clone -b develop --depth 1 https://github.com/boostorg/boost.git ../boost-root
          cd ../boost-root
          git submodule update --init tools
          git submodule update --init libs/config
          git submodule update --init libs/multiprecision
          ./bootstrap.sh
          ./b2 headers
      - name: gcc-clang-native-tsan
        run: |
          grep BOOST_VERSION ../boost-root/boost/version.hpp
          echo "compile ./wide_integer.exe"
          ${{ matrix.compiler }} -v
          ${{ matrix.compiler }} -finline-functions -fsanitize=thread -m64 -O3 -Werror -Wall -Wextra -Wpedantic -Wconversion -Wsign-conversion -Wshadow -Wundef -Wunused-parameter -Wuninitialized -Wunreachable-code -Winit-self -Wzero-as-null-pointer-constant -std=${{ matrix.standard }} -DWIDE_INTEGER_HAS_LIMB_TYPE_UINT64 -I. -I../boost-root -pthread -lpthread  test/test.cpp test/test_uintwide_t_boost_backend.cpp test/test_uintwide_t_edge_cases.cpp test/test_uintwide_t_examples.cpp test/test_uintwide_t_float_convert.cpp test/test_uintwide_t_int_convert.cpp test/test_uintwide_t_n_base.cpp test/test_uintwide_t_n_binary_ops_base.cpp test/test_uintwide_t_spot_values.cpp examples/example000_numeric_limits.cpp examples/example000a_builtin_convert.cpp examples/example001_mul_div.cpp examples/example001a_div_mod.cpp examples/example002_shl_shr.cpp examples/example003_sqrt.cpp examples/example003a_cbrt.cpp examples/example004_rootk_pow.cpp examples/example005_powm.cpp examples/example005a_pow_factors_of_p99.cpp examples/example006_gcd.cpp examples/example007_random_generator.cpp examples/example008_miller_rabin_prime.cpp examples/example008a_miller_rabin_prime.cpp examples/example009_timed_mul.cpp examples/example009a_timed_mul_4_by_4.cpp examples/example009b_timed_mul_8_by_8.cpp examples/example010_uint48_t.cpp examples/example011_uint24_t.cpp examples/example012_rsa_crypto.cpp examples/example013_ecdsa_sign_verify.cpp examples/example014_pi_spigot_wide.cpp -o wide_integer.exe
          echo "ls ./wide_integer.exe"
          ls -la ./wide_integer.exe
          ./wide_integer.exe
  apple-gcc-clang-native:
    runs-on: macos-latest
    defaults:
      run:
        shell: bash
    strategy:
      fail-fast: false
      matrix:
        standard: [ c++14, c++17, c++2a ]
        compiler: [ g++, clang++ ]
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: '0'
      - name: clone-submods-bootstrap-headers-boost-develop
        run: |
          git clone -b develop --depth 1 https://github.com/boostorg/boost.git ../boost-root
          cd ../boost-root
          git submodule update --init tools
          git submodule update --init libs/config
          git submodule update --init libs/multiprecision
          ./bootstrap.sh
          ./b2 headers
      - name: apple-gcc-clang-native
        run: |
          grep BOOST_VERSION ../boost-root/boost/version.hpp
          echo "compile ./wide_integer.exe"
          ${{ matrix.compiler }} -v
          ${{ matrix.compiler }} -finline-functions -m64 -O3 -Werror -Wall -Wextra -Wpedantic -Wconversion -Wsign-conversion -Wshadow -Wundef -Wunused-parameter -Wuninitialized -Wunreachable-code -Winit-self -Wzero-as-null-pointer-constant -std=${{ matrix.standard }} -DWIDE_INTEGER_HAS_LIMB_TYPE_UINT64 -I. -I../boost-root -pthread -lpthread  test/test.cpp test/test_uintwide_t_boost_backend.cpp test/test_uintwide_t_edge_cases.cpp test/test_uintwide_t_examples.cpp test/test_uintwide_t_float_convert.cpp test/test_uintwide_t_int_convert.cpp test/test_uintwide_t_n_base.cpp test/test_uintwide_t_n_binary_ops_base.cpp test/test_uintwide_t_spot_values.cpp examples/example000_numeric_limits.cpp examples/example000a_builtin_convert.cpp examples/example001_mul_div.cpp examples/example001a_div_mod.cpp examples/example002_shl_shr.cpp examples/example003_sqrt.cpp examples/example003a_cbrt.cpp examples/example004_rootk_pow.cpp examples/example005_powm.cpp examples/example005a_pow_factors_of_p99.cpp examples/example006_gcd.cpp examples/example007_random_generator.cpp examples/example008_miller_rabin_prime.cpp examples/example008a_miller_rabin_prime.cpp examples/example009_timed_mul.cpp examples/example009a_timed_mul_4_by_4.cpp examples/example009b_timed_mul_8_by_8.cpp examples/example010_uint48_t.cpp examples/example011_uint24_t.cpp examples/example012_rsa_crypto.cpp examples/example013_ecdsa_sign_verify.cpp examples/example014_pi_spigot_wide.cpp -o wide_integer.exe
          echo "ls ./wide_integer.exe"
          ls -la ./wide_integer.exe
          ./wide_integer.exe
  msvc-release-x64:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: '0'
      - name: clone-submods-bootstrap-headers-boost-develop
        run: |
          git clone -b develop --depth 1 https://github.com/boostorg/boost.git ../boost-root
          cd ../boost-root
          git submodule update --init tools
          git submodule update --init libs/config
          git submodule update --init libs/multiprecision
          ./bootstrap.bat
          ./b2 headers
      - uses: actions/checkout@v3
      - uses: ilammy/msvc-dev-cmd@v1
        with:
          toolset: 14.2
      - name: msvc-release-x64
        shell: cmd
        working-directory: ./
        run: |
          set INCLUDE=%cd%;%cd%\..\boost-root;%INCLUDE%
          MSBuild -m wide_integer.sln -p:useenv=true -p:Configuration=Release -p:Platform=x64 /t:Rebuild
          dir %cd%\x64\Release\wide_integer.exe
          %cd%\x64\Release\wide_integer.exe
  msvc-release-x64-vs2022:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: '0'
      - name: clone-submods-bootstrap-headers-boost-develop
        run: |
          git clone -b develop --depth 1 https://github.com/boostorg/boost.git ../boost-root
          cd ../boost-root
          git submodule update --init tools
          git submodule update --init libs/config
          git submodule update --init libs/multiprecision
          ./bootstrap.bat
          ./b2 headers
      - uses: actions/checkout@v3
      - uses: ilammy/msvc-dev-cmd@v1
        with:
          toolset: 14.3
      - name: msvc-release-x64-vs2022
        shell: cmd
        working-directory: ./
        run: |
          set INCLUDE=%cd%;%cd%\..\boost-root;%INCLUDE%
          MSBuild -m wide_integer_vs2022.sln -p:useenv=true -p:Configuration=Release -p:Platform=x64 /t:Rebuild
          dir %cd%\x64\Release\wide_integer_vs2022.exe
          %cd%\x64\Release\wide_integer_vs2022.exe
  mingw-winhost-x64:
    runs-on: windows-2019
    strategy:
      fail-fast: false
      matrix:
        compiler: [ g++ ]
        standard: [ c++14, c++17, c++2a ]
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: '0'
      - name: clone-submods-bootstrap-headers-boost-develop
        run: |
          git clone -b develop --depth 1 https://github.com/boostorg/boost.git ../boost-root
          cd ../boost-root
          git submodule update --init tools
          git submodule update --init libs/config
          git submodule update --init libs/multiprecision
          ./bootstrap.bat
          ./b2 headers
      - name: mingw-winhost-x64
        shell: cmd
        working-directory: ./
        run: |
          echo compile ./wide_integer.exe
          ${{ matrix.compiler }} -v
          ${{ matrix.compiler }} -finline-functions -m64 -O3 -Wall -Wextra -Wpedantic -Wconversion -Wsign-conversion -Wshadow -Wundef -Wunused-parameter -Wuninitialized -Wunreachable-code -Winit-self -Wzero-as-null-pointer-constant -std=${{ matrix.standard }} -DWIDE_INTEGER_HAS_LIMB_TYPE_UINT64 -I. -I../boost-root -pthread -lpthread  test/test.cpp test/test_uintwide_t_boost_backend.cpp test/test_uintwide_t_edge_cases.cpp test/test_uintwide_t_examples.cpp test/test_uintwide_t_float_convert.cpp test/test_uintwide_t_int_convert.cpp test/test_uintwide_t_n_base.cpp test/test_uintwide_t_n_binary_ops_base.cpp test/test_uintwide_t_spot_values.cpp examples/example000_numeric_limits.cpp examples/example000a_builtin_convert.cpp examples/example001_mul_div.cpp examples/example001a_div_mod.cpp examples/example002_shl_shr.cpp examples/example003_sqrt.cpp examples/example003a_cbrt.cpp examples/example004_rootk_pow.cpp examples/example005_powm.cpp examples/example005a_pow_factors_of_p99.cpp examples/example006_gcd.cpp examples/example007_random_generator.cpp examples/example008_miller_rabin_prime.cpp examples/example008a_miller_rabin_prime.cpp examples/example009_timed_mul.cpp examples/example009a_timed_mul_4_by_4.cpp examples/example009b_timed_mul_8_by_8.cpp examples/example010_uint48_t.cpp examples/example011_uint24_t.cpp examples/example012_rsa_crypto.cpp examples/example013_ecdsa_sign_verify.cpp examples/example014_pi_spigot_wide.cpp -o wide_integer.exe
          dir %cd%\wide_integer.exe
          %cd%\wide_integer.exe
  cygwin-winhost-x64:
    runs-on: windows-latest
    strategy:
      fail-fast: false
      matrix:
        compiler: [ g++ ]
        standard: [ c++17 ]
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: '0'
      - name: Install Cygwin
        run: choco install -y cygwin
      - name: Install Package Manager
        run: choco install -y cyg-get
      - name: Install Packages
        run: cyg-get git gcc-core gcc-g++
      - name: boost-clone-develop
        run: C:\\tools\\cygwin\\bin\\bash -l -c 'cd $(cygpath -u "$GITHUB_WORKSPACE") && git clone -b develop --depth 1 https://github.com/boostorg/boost.git ../boost-root'
      - name: boost-update-tools
        run: C:\\tools\\cygwin\\bin\\bash -l -c 'cd $(cygpath -u "$GITHUB_WORKSPACE")/../boost-root && git submodule update --init tools'
      - name: boost-update-config
        run: C:\\tools\\cygwin\\bin\\bash -l -c 'cd $(cygpath -u "$GITHUB_WORKSPACE")/../boost-root && git submodule update --init libs/config'
      - name: boost-update-multiprecision
        run: C:\\tools\\cygwin\\bin\\bash -l -c 'cd $(cygpath -u "$GITHUB_WORKSPACE")/../boost-root && git submodule update --init libs/multiprecision'
      - name: boost-bootstrap
        run: C:\\tools\\cygwin\\bin\\bash -l -c 'cd $(cygpath -u "$GITHUB_WORKSPACE")/../boost-root && ./bootstrap.sh'
      - name: boost-generate-headers
        run: C:\\tools\\cygwin\\bin\\bash -l -c 'cd $(cygpath -u "$GITHUB_WORKSPACE")/../boost-root && ./b2 headers'
      - name: wide-integer-compile
        run: C:\\tools\\cygwin\\bin\\bash -l -c 'cd $(cygpath -u "$GITHUB_WORKSPACE") && ${{ matrix.compiler }} -finline-functions -m64 -O3 -Wall -Wextra -Wpedantic -Wconversion -Wsign-conversion -Wshadow -Wundef -Wunused-parameter -Wuninitialized -Wunreachable-code -Winit-self -Wzero-as-null-pointer-constant -std=${{ matrix.standard }} -DWIDE_INTEGER_HAS_LIMB_TYPE_UINT64 -I. -I../boost-root -pthread -lpthread  test/test.cpp test/test_uintwide_t_boost_backend.cpp test/test_uintwide_t_edge_cases.cpp test/test_uintwide_t_examples.cpp test/test_uintwide_t_float_convert.cpp test/test_uintwide_t_int_convert.cpp test/test_uintwide_t_n_base.cpp test/test_uintwide_t_n_binary_ops_base.cpp test/test_uintwide_t_spot_values.cpp examples/example000_numeric_limits.cpp examples/example000a_builtin_convert.cpp examples/example001_mul_div.cpp examples/example001a_div_mod.cpp examples/example002_shl_shr.cpp examples/example003_sqrt.cpp examples/example003a_cbrt.cpp examples/example004_rootk_pow.cpp examples/example005_powm.cpp examples/example005a_pow_factors_of_p99.cpp examples/example006_gcd.cpp examples/example007_random_generator.cpp examples/example008_miller_rabin_prime.cpp examples/example008a_miller_rabin_prime.cpp examples/example009_timed_mul.cpp examples/example009a_timed_mul_4_by_4.cpp examples/example009b_timed_mul_8_by_8.cpp examples/example010_uint48_t.cpp examples/example011_uint24_t.cpp examples/example012_rsa_crypto.cpp examples/example013_ecdsa_sign_verify.cpp examples/example014_pi_spigot_wide.cpp -o wide_integer.exe'
      - name: wide-integer-run
        run: C:\\tools\\cygwin\\bin\\bash -l -c 'cd $(cygpath -u "$GITHUB_WORKSPACE") && ./wide_integer.exe'
  gcc-arm-none-eabi:
    runs-on: ubuntu-22.04
    defaults:
      run:
        shell: bash
    strategy:
      fail-fast: false
      matrix:
        example: [ example001_mul_div, example003_sqrt ]
        standard: [ c++14, c++17, c++2a ]
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: '0'
      - name: update-tools
        run: |
          sudo apt install libncurses5 libpython2.7
          mkdir -p emu_env && cd emu_env
          wget --no-check-certificate https://armkeil.blob.core.windows.net/developer/Files/downloads/gnu-rm/10.3-2021.10/gcc-arm-none-eabi-10.3-2021.10-x86_64-linux.tar.bz2
          tar -xvf gcc-arm-none-eabi-10.3-2021.10-x86_64-linux.tar.bz2
          wget --no-check-certificate https://github.com/xpack-dev-tools/qemu-arm-xpack/releases/download/v7.1.0-1/xpack-qemu-arm-7.1.0-1-linux-x64.tar.gz
          tar -xvzf xpack-qemu-arm-7.1.0-1-linux-x64.tar.gz
        working-directory: ./
      - id: upcase_my_example
        uses: ASzc/change-string-case-action@v5
        with:
          string: ${{ matrix.example }}
      - name: build-example-stm32f429
        run: |
          mkdir -p bin
          emu_env/gcc-arm-none-eabi-10.3-2021.10/bin/arm-none-eabi-g++ -std=${{ matrix.standard }} -Wall -Wextra -Wpedantic -pedantic -O0 -g -gdwarf-2 -ffunction-sections -fdata-sections -x c++ -fno-rtti -fno-use-cxa-atexit -fno-exceptions -fno-nonansi-builtins -fno-threadsafe-statics -fno-enforce-eh-specs -ftemplate-depth=32 -mcpu=cortex-m4 -mtune=cortex-m4 -mthumb -mfloat-abi=soft -mno-unaligned-access -mno-long-calls -I. -DWIDE_INTEGER_DISABLE_IOSTREAM -DWIDE_INTEGER_DISABLE_TO_STRING -DWIDE_INTEGER_DISABLE_TRIVIAL_COPY_AND_STD_LAYOUT_CHECKS -DWIDE_INTEGER_NAMESPACE=ckormanyos -DWIDE_INTEGER_STANDALONE_${{ steps.upcase_my_example.outputs.uppercase }} examples/${{ matrix.example }}.cpp ./target/micros/stm32f429/make/single/crt.cpp -nostartfiles -Wl,--gc-sections -Wl,-Map,./bin/${{ matrix.example }}.map -T ./target/micros/stm32f429/make/stm32f429.ld --specs=nano.specs --specs=nosys.specs -o ./bin/${{ matrix.example }}.elf
          emu_env/gcc-arm-none-eabi-10.3-2021.10/bin/arm-none-eabi-objcopy ./bin/${{ matrix.example }}.elf -O ihex ./bin/${{ matrix.example }}.hex
          ls -la ./bin/${{ matrix.example }}.elf ./bin/${{ matrix.example }}.hex ./bin/${{ matrix.example }}.map
        working-directory: ./
      - name: emulate-target stm32f429
        run: |
          ./emu_env/xpack-qemu-arm-7.1.0-1/bin/qemu-system-gnuarmeclipse --verbose --mcu STM32F429ZI --nographic --gdb tcp::9999 -d unimp,guest_errors &
        working-directory: ./
      - name: run-test-on-target
        run: |
          ./emu_env/gcc-arm-none-eabi-10.3-2021.10/bin/arm-none-eabi-gdb-py ./bin/${{ matrix.example }}.elf -x ./target/build/test_examples_emulator.py
          qemu_result=$?
          echo "qemu_result" "$qemu_result"
          echo "qemu_result" "$qemu_result" | grep 'qemu_result 0'
        working-directory: ./
  gcc-avr:
    runs-on: ubuntu-22.04
    defaults:
      run:
        shell: bash
    strategy:
      fail-fast: false
      matrix:
        example: [ example001_mul_div, example003_sqrt ]
        standard: [ c++14 ]
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: '0'
      - name: update-tools
        run: sudo apt install gcc-avr avr-libc
      - name: clone-real-time-cpp
        run: |
          git clone -b master --depth 1 https://github.com/ckormanyos/real-time-cpp.git ../real-time-cpp-root
        working-directory: ./
      - id: upcase_my_example
        uses: ASzc/change-string-case-action@v5
        with:
          string: ${{ matrix.example }}
      - name: gcc-avr
        run: |
          mkdir bin
          echo ${{ steps.upcase_my_example.outputs.uppercase }}
          echo 'compile examples/${{ matrix.example }}.cpp with:'
          echo 'avr-g++ -x c++ -std=${{ matrix.standard }} -Os -Werror -Wall -Wextra -Wpedantic -pedantic -Wmain -Wundef -Wconversion -Wsign-conversion -Wunused-parameter -Wuninitialized -Wmissing-declarations -Wshadow -Wunreachable-code -Wswitch-default -Wswitch-enum -Wcast-align -Wmissing-include-dirs -Winit-self -Wfloat-equal -Wdouble-promotion -mmcu=atmega328p -mrelax -finline-functions -finline-limit=32 -fsigned-char -g -gdwarf-2 -fno-exceptions -ffunction-sections -fdata-sections -fno-rtti -fno-use-cxa-atexit -fno-exceptions -fno-threadsafe-statics -fno-enforce-eh-specs -ftemplate-depth=32 -Wzero-as-null-pointer-constant -I. -I../real-time-cpp-root/ref_app/src -I../real-time-cpp-root/ref_app/src/util/STL -DWIDE_INTEGER_DISABLE_IOSTREAM -DWIDE_INTEGER_DISABLE_TO_STRING -DWIDE_INTEGER_DISABLE_TRIVIAL_COPY_AND_STD_LAYOUT_CHECKS -DWIDE_INTEGER_DISABLE_IMPLEMENT_UTIL_DYNAMIC_ARRAY -DWIDE_INTEGER_NAMESPACE=ckormanyos -DWIDE_INTEGER_STANDALONE_${{ steps.upcase_my_example.outputs.uppercase }} examples/${{ matrix.example }}.cpp -Wl,--gc-sections -Wl,-Map,./bin/${{ matrix.example }}.map -o bin/${{ matrix.example }}.elf'
          avr-g++ -x c++ -std=${{ matrix.standard }} -Os -Werror -Wall -Wextra -Wpedantic -pedantic -Wmain -Wundef -Wconversion -Wsign-conversion -Wunused-parameter -Wuninitialized -Wmissing-declarations -Wshadow -Wunreachable-code -Wswitch-default -Wswitch-enum -Wcast-align -Wmissing-include-dirs -Winit-self -Wfloat-equal -Wdouble-promotion -mmcu=atmega328p -mrelax -finline-functions -finline-limit=32 -fsigned-char -g -gdwarf-2 -fno-exceptions -ffunction-sections -fdata-sections -fno-rtti -fno-use-cxa-atexit -fno-exceptions -fno-threadsafe-statics -fno-enforce-eh-specs -ftemplate-depth=32 -Wzero-as-null-pointer-constant -I. -I../real-time-cpp-root/ref_app/src -I../real-time-cpp-root/ref_app/src/util/STL -DWIDE_INTEGER_DISABLE_IOSTREAM -DWIDE_INTEGER_DISABLE_TO_STRING -DWIDE_INTEGER_DISABLE_TRIVIAL_COPY_AND_STD_LAYOUT_CHECKS -DWIDE_INTEGER_DISABLE_IMPLEMENT_UTIL_DYNAMIC_ARRAY -DWIDE_INTEGER_NAMESPACE=ckormanyos -DWIDE_INTEGER_STANDALONE_${{ steps.upcase_my_example.outputs.uppercase }} examples/${{ matrix.example }}.cpp -Wl,--gc-sections -Wl,-Map,./bin/${{ matrix.example }}.map -o bin/${{ matrix.example }}.elf
          echo
          echo 'run objcopy with:'
          echo 'avr-objcopy bin/${{ matrix.example }}.elf -O ihex bin/${{ matrix.example }}.hex'
          avr-objcopy bin/${{ matrix.example }}.elf -O ihex bin/${{ matrix.example }}.hex
          echo
          echo 'ls -la bin/${{ matrix.example }}.elf bin/${{ matrix.example }}.map bin/${{ matrix.example }}.hex'
          ls -la bin/${{ matrix.example }}.elf bin/${{ matrix.example }}.map bin/${{ matrix.example }}.hex
        working-directory: ./
  gcc-clang-boost_backend:
    runs-on: ubuntu-22.04
    defaults:
      run:
        shell: bash
    strategy:
      fail-fast: false
      matrix:
        standard: [ gnu++14, gnu++17, gnu++20 ]
        compiler: [ g++-11, clang++-12 ]
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: '0'
      - name: update-tools
        run: sudo apt install g++-11 clang-12
      - name: clone-submods-bootstrap-headers-boost-develop
        run: |
          git clone -b develop --depth 1 https://github.com/boostorg/boost.git ../boost-root
          cd ../boost-root
          git submodule update --init tools
          git submodule update --init libs/assert
          git submodule update --init libs/config
          git submodule update --init libs/core
          git submodule update --init libs/math
          git submodule update --init libs/multiprecision
          ./bootstrap.sh
          ./b2 headers
      - name: gcc-clang-boost_backend
        run: |
          grep BOOST_VERSION ../boost-root/boost/version.hpp
          echo "compile ./test_uintwide_t_boost_backend_via_test_arithmetic.exe"
          ${{ matrix.compiler }} -v
          ${{ matrix.compiler }} -finline-functions -m64 -O3 -Werror -Wall -Wextra -Wpedantic -Wconversion -Wsign-conversion -Wshadow -Wundef -Wunused-parameter -Wuninitialized -Wunreachable-code -Winit-self -Wzero-as-null-pointer-constant -std=${{ matrix.standard }} -DWIDE_INTEGER_HAS_LIMB_TYPE_UINT64 -I. -I../boost-root test/test_uintwide_t_boost_backend_via_test_arithmetic.cpp -o test_uintwide_t_boost_backend_via_test_arithmetic.exe
          echo "ls -la ./test_uintwide_t_boost_backend_via_test_arithmetic.exe"
          ls -la ./test_uintwide_t_boost_backend_via_test_arithmetic.exe
          ./test_uintwide_t_boost_backend_via_test_arithmetic.exe
  gcc-clang-xtra:
    runs-on: ubuntu-22.04
    defaults:
      run:
        shell: bash
    strategy:
      fail-fast: false
      matrix:
        standard: [ c++20, c++2b ]
        compiler: [ g++-12, clang++-14 ]
        suite: [ test_uintwide_t_xtra_from_issue_335 ]
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: '0'
      - name: update-tools
        run: sudo apt install g++-12 clang-14
      - name: gcc-clang-xtra
        run: |
          echo "compile ./${{ matrix.suite }}.exe"
          ${{ matrix.compiler }} -v
          ${{ matrix.compiler }} -finline-functions -m64 -O3 -Werror -Wall -Wextra -Wpedantic -Wconversion -Wsign-conversion -Wshadow -Wundef -Wunused-parameter -Wuninitialized -Wunreachable-code -Winit-self -Wzero-as-null-pointer-constant -std=${{ matrix.standard }} -DWIDE_INTEGER_DISABLE_PRIVATE_CLASS_DATA_MEMBERS -DWIDE_INTEGER_NAMESPACE=ckormanyos -I. test/${{ matrix.suite }}.cpp -o ${{ matrix.suite }}.exe
          ls -la ./${{ matrix.suite }}.exe
          ./${{ matrix.suite }}.exe
  gcc-valgrind:
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
    strategy:
      fail-fast: false
      matrix:
        standard: [ c++20 ]
        compiler: [ g++ ]
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: '0'
      - name: clone-submods-bootstrap-headers-boost-develop
        run: |
          git clone -b develop --depth 1 https://github.com/boostorg/boost.git ../boost-root
          cd ../boost-root
          git submodule update --init tools
          git submodule update --init libs/config
          git submodule update --init libs/multiprecision
          ./bootstrap.sh
          ./b2 headers
      - name: update-tools
        run: |
          sudo apt-get update -y
          sudo apt-get install -y valgrind
      - name: gcc-valgrind
        run: |
          echo "compile"
          ${{ matrix.compiler }} -v
          ${{ matrix.compiler }} -m64 -O3 -Wall -Wextra -Wpedantic -Wconversion -Wsign-conversion -std=${{ matrix.standard }} -DWIDE_INTEGER_HAS_COVERAGE -I. -I../boost-root -pthread -lpthread test/test.cpp test/test_uintwide_t_boost_backend.cpp test/test_uintwide_t_edge_cases.cpp test/test_uintwide_t_examples.cpp test/test_uintwide_t_float_convert.cpp test/test_uintwide_t_int_convert.cpp test/test_uintwide_t_n_base.cpp test/test_uintwide_t_n_binary_ops_base.cpp examples/example000a_builtin_convert.cpp test/test_uintwide_t_spot_values.cpp examples/example000_numeric_limits.cpp examples/example001_mul_div.cpp examples/example001a_div_mod.cpp examples/example002_shl_shr.cpp examples/example003_sqrt.cpp examples/example003a_cbrt.cpp examples/example004_rootk_pow.cpp examples/example005_powm.cpp examples/example005a_pow_factors_of_p99.cpp examples/example006_gcd.cpp examples/example007_random_generator.cpp examples/example008_miller_rabin_prime.cpp examples/example008a_miller_rabin_prime.cpp examples/example009_timed_mul.cpp examples/example009a_timed_mul_4_by_4.cpp examples/example009b_timed_mul_8_by_8.cpp examples/example010_uint48_t.cpp examples/example011_uint24_t.cpp examples/example012_rsa_crypto.cpp examples/example013_ecdsa_sign_verify.cpp examples/example014_pi_spigot_wide.cpp -o wide_integer.exe
          valgrind --leak-check=yes --log-file=wide_integer_valgrind.txt ./wide_integer.exe
          grep '0 bytes in 0 blocks' wide_integer_valgrind.txt
          grep '0 errors from 0 contexts' wide_integer_valgrind.txt
