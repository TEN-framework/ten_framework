name: Build - mac

on:
  pull_request:
    types: [opened, synchronize, reopened]
    paths-ignore:
      - "tools/**"
      - "docs/**"
      - ".vscode/**"
      - ".devcontainer/**"
      - ".github/**"
      - "!.github/workflows/build_mac.yml"
      - "**.md"

jobs:
  build-mac-arm64:
    concurrency:
      group: build-mac-arm64-${{ github.head_ref }}-${{ matrix.build_type }}
      cancel-in-progress: true
    runs-on: macos-latest
    strategy:
      matrix:
        build_type: [debug, release]
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: "0"
          submodules: "true"

      - uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      - uses: actions/setup-go@v5
        with:
          go-version: "stable"
          cache: false

      - name: Set ulimit and sysctl
        run: |
          # Because there are concurrent test cases which involves many
          # concurrent socket connections, we need to enlarge the maximum number
          # of the opened file descriptor.
          ulimit -n 102400

          # Because there are concurrent test cases which will create many
          # concurrent connections simutaneously, we increase the TCP listening
          # backlog value to 8192.
          sudo sysctl -w kern.ipc.somaxconn=8192
        shell: bash

      - name: Install tools and dependencies
        run: |

          if [ ${{ matrix.build_type }} == "debug" ]; then
            # Since the TEN runtime and TEN manager are a combination of C and
            # Rust, to enable ASan, the ASan versions used by both the C and
            # Rust compilation environments must be consistent. Therefore, it is
            # necessary to lock the LLVM and Rust versions to enable ASan.
            brew install llvm@18
            rustup default nightly-2024-07-19
          else
            rustup default nightly
          fi

          brew install tree
          pip3 install --use-pep517 python-dotenv jinja2
          go install golang.org/dl/go1.20.12@latest && go1.20.12 download
          go env -w GOFLAGS="-buildvcs=false"
          cargo install --force cbindgen

      - name: Build
        run: |
          if [ ${{ matrix.build_type }} == "debug" ]; then
            export PATH="/opt/homebrew/opt/llvm@18/bin:$PATH"
          fi
          export PATH=$(pwd)/core/ten_gn:$PATH
          echo $PATH
          tgn gen mac arm64 ${{ matrix.build_type }} -- log_level=1 enable_serialized_actions=true ten_enable_integration_tests=false ten_enable_private_tests=false ten_rust_enable_tests=false ten_rust_enable_gen_cargo_config=false
          tgn build mac arm64 ${{ matrix.build_type }}
          tree -I 'gen|obj' out

      - name: Run Tests (ten_utils_unit_test)
        env:
          ASAN_OPTIONS: detect_stack_use_after_return=1:color=always:unmap_shadow_on_exit=1:abort_on_error=1
          MALLOC_CHECK_: 3
          TEN_ENABLE_MEMORY_TRACKING: "true"
          TEN_ENABLE_BACKTRACE_DUMP: "true"
        run: |
          chmod +x out/mac/arm64/tests/standalone/ten_utils_unit_test
          out/mac/arm64/tests/standalone/ten_utils_unit_test

      - name: Run Tests (ten_runtime_unit_test)
        env:
          ASAN_OPTIONS: detect_stack_use_after_return=1:color=always:unmap_shadow_on_exit=1:abort_on_error=1
          MALLOC_CHECK_: 3
          TEN_ENABLE_MEMORY_TRACKING: "true"
          TEN_ENABLE_BACKTRACE_DUMP: "true"
        run: |
          chmod +x out/mac/arm64/tests/standalone/ten_runtime_unit_test
          out/mac/arm64/tests/standalone/ten_runtime_unit_test

      - name: Run Tests (ten_runtime_smoke_test)
        env:
          ASAN_OPTIONS: detect_stack_use_after_return=1:color=always:unmap_shadow_on_exit=1:abort_on_error=1
          MALLOC_CHECK_: 3
          TEN_ENABLE_MEMORY_TRACKING: "true"
          TEN_ENABLE_BACKTRACE_DUMP: "true"
        run: |
          chmod +x out/mac/arm64/tests/standalone/ten_runtime_smoke_test
          out/mac/arm64/tests/standalone/ten_runtime_smoke_test

  build-mac-x64:
    concurrency:
      group: build-mac-x64-${{ github.head_ref }}-${{ matrix.build_type }}
      cancel-in-progress: true
    runs-on: macos-13
    strategy:
      matrix:
        build_type: [release]
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: "0"
          submodules: "true"

      - uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      - uses: actions/setup-go@v5
        with:
          go-version: "stable"
          cache: false

      - name: Set ulimit and sysctl
        run: |
          # Because there are concurrent test cases which involves many
          # concurrent socket connections, we need to enlarge the maximum number
          # of the opened file descriptor.
          ulimit -n 102400

          # Because there are concurrent test cases which will create many
          # concurrent connections simutaneously, we increase the TCP listening
          # backlog value to 8192.
          sudo sysctl -w kern.ipc.somaxconn=8192
        shell: bash

      - name: Install tools and dependencies
        run: |

          if [ ${{ matrix.build_type }} == "debug" ]; then
            # Since the TEN runtime and TEN manager are a combination of C and
            # Rust, to enable ASan, the ASan versions used by both the C and
            # Rust compilation environments must be consistent. Therefore, it is
            # necessary to lock the LLVM and Rust versions to enable ASan.
            brew install llvm@18
            rustup default nightly-2024-07-19
          else
            rustup default nightly
          fi

          brew install tree
          pip3 install --use-pep517 python-dotenv jinja2
          go install golang.org/dl/go1.20.12@latest && go1.20.12 download
          go env -w GOFLAGS="-buildvcs=false"
          cargo install --force cbindgen

      - name: Build
        run: |
          if [ ${{ matrix.build_type }} == "debug" ]; then
            export PATH="/usr/local/opt/llvm@18/bin:$PATH"
          fi
          export PATH=$(pwd)/core/ten_gn:$PATH
          echo $PATH
          tgn gen mac x64 ${{ matrix.build_type }} -- log_level=1 enable_serialized_actions=true ten_enable_integration_tests=false ten_enable_private_tests=false ten_rust_enable_tests=false ten_package_manager_enable_tests=false ten_rust_enable_gen_cargo_config=false
          tgn build mac x64 ${{ matrix.build_type }}
          tree -I 'gen|obj' out

      - name: Run Tests (ten_utils_unit_test)
        env:
          ASAN_OPTIONS: detect_stack_use_after_return=1:color=always:unmap_shadow_on_exit=1:abort_on_error=1
          MALLOC_CHECK_: 3
          TEN_ENABLE_MEMORY_TRACKING: "true"
          TEN_ENABLE_BACKTRACE_DUMP: "true"
        run: |
          chmod +x out/mac/x64/tests/standalone/ten_utils_unit_test
          out/mac/x64/tests/standalone/ten_utils_unit_test

      - name: Run Tests (ten_runtime_unit_test)
        env:
          ASAN_OPTIONS: detect_stack_use_after_return=1:color=always:unmap_shadow_on_exit=1:abort_on_error=1
          MALLOC_CHECK_: 3
          TEN_ENABLE_MEMORY_TRACKING: "true"
          TEN_ENABLE_BACKTRACE_DUMP: "true"
        run: |
          chmod +x out/mac/x64/tests/standalone/ten_runtime_unit_test
          out/mac/x64/tests/standalone/ten_runtime_unit_test

      - name: Run Tests (ten_runtime_smoke_test)
        env:
          ASAN_OPTIONS: detect_stack_use_after_return=1:color=always:unmap_shadow_on_exit=1:abort_on_error=1
          MALLOC_CHECK_: 3
          TEN_ENABLE_MEMORY_TRACKING: "true"
          TEN_ENABLE_BACKTRACE_DUMP: "true"
        run: |
          chmod +x out/mac/x64/tests/standalone/ten_runtime_smoke_test
          out/mac/x64/tests/standalone/ten_runtime_smoke_test

  # Building ten_runtime without the ten_rust library (i.e., ten_enable_ten_rust_apis=false).
  build-mac-arm64-without-ten-rust:
    concurrency:
      group: build-mac-arm64-without-ten-rust-${{ github.head_ref }}-${{ matrix.build_type }}
      cancel-in-progress: true
    runs-on: macos-latest
    strategy:
      matrix:
        build_type: [debug]
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: "0"
          submodules: "true"

      - uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      - uses: actions/setup-go@v5
        with:
          go-version: "stable"
          cache: false

      - name: Set ulimit and sysctl
        run: |
          # Because there are concurrent test cases which involves many
          # concurrent socket connections, we need to enlarge the maximum number
          # of the opened file descriptor.
          ulimit -n 102400

          # Because there are concurrent test cases which will create many
          # concurrent connections simutaneously, we increase the TCP listening
          # backlog value to 8192.
          sudo sysctl -w kern.ipc.somaxconn=8192
        shell: bash

      - name: Install tools and dependencies
        run: |

          if [ ${{ matrix.build_type }} == "debug" ]; then
            # Since the TEN runtime and TEN manager are a combination of C and
            # Rust, to enable ASan, the ASan versions used by both the C and
            # Rust compilation environments must be consistent. Therefore, it is
            # necessary to lock the LLVM and Rust versions to enable ASan.
            brew install llvm@18
            rustup default nightly-2024-07-19
          else
            rustup default nightly
          fi

          brew install tree
          pip3 install --use-pep517 python-dotenv jinja2
          go install golang.org/dl/go1.20.12@latest && go1.20.12 download
          go env -w GOFLAGS="-buildvcs=false"
          cargo install --force cbindgen

      - name: Build
        run: |
          if [ ${{ matrix.build_type }} == "debug" ]; then
            export PATH="/opt/homebrew/opt/llvm@18/bin:$PATH"
          fi
          export PATH=$(pwd)/core/ten_gn:$PATH
          echo $PATH
          tgn gen mac arm64 ${{ matrix.build_type }} -- log_level=1 enable_serialized_actions=true ten_enable_integration_tests=false ten_enable_private_tests=false ten_rust_enable_tests=false ten_rust_enable_gen_cargo_config=false ten_enable_ten_rust_apis=false
          tgn build mac arm64 ${{ matrix.build_type }}
          tree -I 'gen|obj' out

      - name: Run Tests (ten_runtime_smoke_test)
        env:
          ASAN_OPTIONS: detect_stack_use_after_return=1:color=always:unmap_shadow_on_exit=1:abort_on_error=1
          MALLOC_CHECK_: 3
          TEN_ENABLE_MEMORY_TRACKING: "true"
          TEN_ENABLE_BACKTRACE_DUMP: "true"
        run: |
          chmod +x out/mac/arm64/tests/standalone/ten_runtime_smoke_test
          out/mac/arm64/tests/standalone/ten_runtime_smoke_test
